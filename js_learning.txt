//confirm("I am ok");Ask user yes or not return True or False
/*prompt("Are you ok?") Ask for entry fiels; return string from user enter field
console.log(datattype) // return datatype to console -   as  print () 
console.log(11 % 3) // return 2 (remainder of devision) */
(&&), or (||), and not (!)
"string".toUpperCase();
var friends = {key1:value} // obj1 = {key:"some key"}
newStr = str.replace(/[^a-zA-Z0-9]/g, '_');
e=s.indexOf(string)

// js vs python
//=== vs ==; !== vs !=
//"wonderful day".substring(4,8) return slice of string
var computerChoice = Math.random()
Math.floor(Math.random() * 2)

//--- if statement ---
/*
if (10 = 10); {
    console.log("You got a true!");
} else if (statement){
    console.log("You got a false!");
}else{
  }
}
*/

var l = [10,15,26,54]
var i = 0
var j = 0
while (i!==26){
    var i = l[j]
    console.log("Hello "+l[j])
    j++
    }


// Example of a for loop:
for (var i = 1; i < 11; i = i + 1) {
    /* your code here */;
}
 for(var prop in friends) {
    if(friends[prop].firstName === name) {
      console.log(friends[prop]);
      return friends[prop];
    }
  }

//--- Function ---

var compare = function (userChoice, computerChoice){
 if (userChoice === computerChoice)  {
 return "The result is a tie!"
 }
}
//If you call isNaN on something, it checks to see if that thing is not a number
isNaN('berry'); // => true
isNaN(NaN); // => true
isNaN(undefined); // => true
isNaN(42);  // => false

var lunch = prompt("What do you want for lunch?","Type your lunch choice here");


/*allows you to preset a number of options (called cases), then check an expression to see if it matches any of them. If there's a match, the program will perform the action for the matching case; if there's no match, it can execute a default option.*/

switch (/*Some expression*/) {
    case 'option1':
        // Do something
        break;
    case 'option2':
        // Do something else
        break;
    case 'option3':
        // Do a third thing
        break;
    default:
       // Do yet another thing
}
Object.getOwnPropertyNames() возвращает перечислимые и не перечислимые свойства из объекта или массива.
Пример:
var arr = ["a", "b", "c"]; 
print(Object.getOwnPropertyNames(arr).sort()); // prints "0,1,2,length" 
 
// Array-like object 
var obj = { 0: "a", 1: "b", 2: "c"}; 
print(Object.getOwnPropertyNames(obj).sort()); // prints "0,1,2" 
Object.keys() возвращает перечислимые свойства из объекта или массива.
Пример:
var arr = ["a", "b", "c"]; 
alert(Object.keys(arr)); // will alert "0,1,2" 
 
// array like object 
var obj = { 0 : "a", 1 : "b", 2 : "c"}; 
alert(Object.keys(obj)); // will alert "0,1,2" 

try { 
    var number = 9; 
    alert( number.toString(2) ); 
    // ... 
    alert('Выполнено без ошибок!'); 
} catch(e) { 
    alert('Ошибка!'); 
}
Разница лишь в способе передачи аргументов. Первый элемент - контекст, второй - массив врагументов или набор аргументов через запятую:

function f(a,b,c) {
return a * b + c;
}
f.call(f, 1, 2, 3); // аргументы перечисляются через запятую;
var args = [1,2,3];
f.apply(f, args); // // аргументы передаются в виде массива;
// В обоих случаях вызовется функция <b>f</b> с аргументами a = 1, b = 2, c = 3;
